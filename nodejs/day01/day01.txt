nodeJS?

    NodeJs는 Chrome V8 JavaScript 엔진으로 빌드된 JS 런타임(환경)
    
    nodeJS = 백엔드 = 서버(X)

    nodeJS를 통해 다양한 자바스크립트 애플리케이션을 실행할 수 있 지만,
    nodeJS는 서버를 실행하는 유용한 도구들을 제공하여 서버로서 제일 많이 사용
    ex) express, nestJS, htpp, fs ...

    백엔드, 프론트엔드 같은 언어를 사용하는게 장점
    기본 모듈이 자바스크립트 사용, 서버(apache, iis, zeus ...)와 WAS (tomcat.. ) 같은
    서버 소프트웨어가 필요없이 웹 서터 역할을 하는 내장 라이브러리가 존재

    npm 이라는 패키지 관리자가 포함
    npm init =>> packge.json 생성

    하지만 나중에 서버 규모가 커지면 결국은 외부 서버를 연결해야함

서버외의 nodeJS

    앵귤러, 리액트, 뷰, 리엑트 네이티브

사용법

    node 파일명

------------------------------------------------------------

callback 지옥?
    JS는 비동기를 마주하는 상황이 빈번하게 일어남

    ex)
    myblog에서 게시글id와 댓글내용을 백서버로 보내게 되면 백서버는
    게시글을 먼저 찾고 찾은 게시글에 댓글을 달아야합니다.
    이 경우 게시글을 찾기 전에 댓글을 달려고하면 어떤 현상이 일어날까?

    이러한 비동기 처리를 위하여 callback 함수를 사용하는데,
    callback 함수가 중첩되어 함수의 길이가 깊어지고 가독성이 떨어지며 코드가
    난잡하게 보이는 현상

    해결 방안으로는 
    기명함수 (함수 변수화 시켜서 이름 지어주는 것)
    promise, async/await 등이 있음

promise?
    비동기를 접하게 되었을 때 악명 높은 콜백 지옥을 탈출했다는 점에서
    높은 평가를 받고 있음. 대기, 이행, 실패의 상태가 존재하며 각 pen
    ding, resolve, reject라고 칭함

    promise를 선언하면 대기상태에서 실행은 바로 되어있지만
    나중에 결과값을 받는 객체

async, await
    promise의 then catch 반복으로 인한 코드가 길어지는 현상과 pending(대기) 상태가 지속되는
    현상을 해결하기 위해 등장

------------------------------------------------------------

 fs 모듈
    파일 처리와 관련된 모듈
    node.js에서 가장 기초적인 모듈

    readFile()      :   파일을 비동기적으로 읽음
    reaFileSync()   :   파일을 동기적으로 읽음
    writeFile()     :   파일을 비동기적으로 씀
    writeFileSync() :   파일을 동기적으로 씀

    예외처리
        try{
            예외가 발생할 수 있는 문장
        } catch (e) {
            예외가 발생했을 경우 수행할 문장
        }

 http 모듈
    http 웹 서버를 생성하는 것과 관련된 모든 기능을 담당

    createServer()  : server 객체를 생성
    writeHead()     : 응답 header를 구성
    end()           : 응답 body를 작성
    listen()        : 서버를 실행하고 클라이언트를 기다림


 express 모듈
    http 모듈만 사용해서 웹 서버를 구성하면 직접 많은 기능을 따로 개발해야 하는 불편한 점이 있음
    간단한 코드로 웹 서버의 기능을 대부분 구현할 수 있는 express 모듈을 사용
    npm i express

  nodemon 모듈
    서버 코드를 변경할 때마다 서버를 종료하지 않아도 알아서 서버를 재시작하는 모듈
    npm i nodemon  


    window PowerShall 관리자 권한으로 실행
    get-help Set-ExecutionPolicy  => Y
    Set-ExecutionPolicy RemoteSigned => Y

    sudo(맥북) npm install -g nodemon